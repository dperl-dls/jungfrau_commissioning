name: Code CI

on:
  push:
  pull_request:
env:
  # The target python version, which must match the Dockerfile version
  CONTAINER_PYTHON: "3.11"

jobs:
  lint:
    # pull requests are a duplicate of a branch push if within the same repo.
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install python packages
        uses: ./.github/actions/install_requirements
        with:
          requirements_file: requirements-dev-3.x.txt
          install_options: -e .[dev]

      - name: Lint
        run: tox -e pre-commit,mypy

  test:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"] # can add windows-latest, macos-latest
        python: ["3.10", "3.11"]
        install: ["-e .[dev]"]

    runs-on: ${{ matrix.os }}
    env:
      # https://github.com/pytest-dev/pytest/issues/2042
      PY_IGNORE_IMPORTMISMATCH: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Need this to get version number from last tag
          fetch-depth: 0

      - name: Install python packages
        uses: ./.github/actions/install_requirements
        with:
          python_version: ${{ matrix.python }}
          requirements_file: requirements-test-${{ matrix.os }}-${{ matrix.python }}.txt
          install_options: ${{ matrix.install }}

      - name: List dependency tree
        run: pipdeptree

      - name: Run tests
        run: pytest

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          name: ${{ matrix.python }}/${{ matrix.os }}
          files: cov.xml

  dist:
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.repository
    runs-on: "ubuntu-latest"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          # Need this to get version number from last tag
          fetch-depth: 0

      - name: Build sdist and wheel
        run: |
          export SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct) && \
          pipx run build

      - name: Upload sdist and wheel as artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist

      - name: Check for packaging errors
        run: pipx run twine check --strict dist/*

      - name: Install python packages
        uses: ./.github/actions/install_requirements
        with:
          python_version: ${{env.CONTAINER_PYTHON}}
          requirements_file: requirements.txt
          install_options: dist/*.whl

      - name: Test module --version works using the installed wheel
        # If more than one module in src/ replace with module name to test
        run: python -m $(ls src | head -1) --version
